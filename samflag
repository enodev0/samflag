#!/usr/bin/env python3
# samflag v0.1
# License: MIT

import sys

flags = {
    1: "Read paired (0x1, 1)",
    2: "Read mapped in proper pair (0x2, 2)",  # needs 1
    4: "Read unmapped (0x4, 4)",
    8: "Mate unmapped (0x8, 8)",  # needs 1
    16: "Read reverse strand (0x10, 16)",
    32: "Mate reverse strand (0x20, 32)",  # needs 1
    64: "First in pair (0x40, 64)",  # needs 1
    128: "Second in pair (0x80, 128)",  # needs 1
    256: "Not primary alignment (0x100, 256)",
    512: "Read fails platform/vendor quality checks (0x200, 512)",
    1024: "Read is PCR or optical duplicate (0x400, 1024)",
    2048: "Supplementary alignment (0x800, 2048)",
}


def samflag_decode(flag):

    K = [2 ** i for i in range(0, 12)]
    K.sort(reverse=True)
    W = []
    if flag in K:
        W.append(flag)
        return W

    def floor_K(n):
        for i in K:
            if i < n:
                return i

    while True:
        if flag in K:
            W.append(flag)
            return W
        x = floor_K(flag)
        W.append(x)
        flag -= x


def help():
    print()
    print("Usage:\n")
    print("  ~$ samflag listflags")
    print("  ~$ samflag describe <flag>")
    print()
    raise SystemExit()


def main():

    if (len(sys.argv) == 1) or (len(sys.argv) > 3):
        help()

    mode = sys.argv[1]

    if mode == "listflags":
        if len(sys.argv) != 2:
            help()
        print()
        for k, v in flags.items():
            print("{}\t{}".format(k, v))
        print()
    elif mode == "describe":
        if len(sys.argv) != 3:
            help()
        flag = int(sys.argv[2])
        if flag > 0xFFF:  # 4095
            print("Invalid SAM flag --> {}".format(flag))
            raise SystemExit()

        decode = samflag_decode(flag)
        print()
        for k, v in flags.items():
            if k in decode:
                print("{}\t{}".format(k, v))
        print("\nsum{} = {} ({})".format(decode, flag, hex(flag)))
        print()
    else:
        help()


if __name__ == "__main__":
    main()
